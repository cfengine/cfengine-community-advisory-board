
* November 17th, 2016

*Attendees:*

 - [X] Nick
 - [X] Mike
 - [X] Ted
 - [X] Eystein
 - [X] Jimis
 - [X] Bas
 - [ ] Jonathan

*** 3.10.0b1
:PROPERTIES:
:ID:       e9077a3a-7078-4736-a424-f8b9aca222f0
:END:

- Passed all EFL tests.
- Neil used for a little docker POC again with no errors.
- Basv tested and it worked without any issues.
- Normation noted increased mallocs (2x 3.6) but no ticket filed and no data.
- Mike may have found an issue will report findings later.

*** Advisory Board EOY 2
:PROPERTIES:
:ID:       1cb889b9-ef5d-4ce5-904a-4f49516d9867
:END:

This is the end of the second year of the community advisory board. We had good
attendance during the first year, but this second year we have had somewhat
spotty attendance.

Thoughts on the value of the board:

- CAB Pushed for augments file (def.json)
- CAB Disucssed Documentation changes: MPF rendered in docs, language guide relocated
- Nick believes the board meetings have influence on product direction
  especially core.
- Mike wonders if we should have meetings in a more public location
- Ted thinks the meetings tend to focus on maintenance, he wants to talk about
  new core and it seems outside the comfort level of this meeting and the
  community in general.
- No one is tired of the meetings.
- Trail the entire meeting in public =#cfengine=
  - Bas
  - Svoboda
  - Neil
- Consider splitting the CAB 45/45 in main =#cfengine= room and in
  =#cfengine-cab=.

**** TODO Foloowup with jonathan for thoughts on value of the board
:PROPERTIES:
:ID:       1f9a98df-1092-4b4d-906b-27b08893d733
:END:

*** IPV6 [[jira:CFE-1520]]
:PROPERTIES:
:ID:       c3c6cb83-0576-4510-b20c-6397e2ec7f2e
:END:
- Recently cf-runagent got fixed for ipv6
- LinkedIn has run out of RCF1918 ipv4 space in their data centers, being forced
  to move to ipv6
  - Currently running dual stack. Have not yet experienced any issues but plan
    to drop ipv4 in the next few months.

*** Policy map/hash [[jira:1903]]
:PROPERTIES:
:ID:       b45f317b-9a63-48a9-8497-d4eccf192b5c
:END:

Benefits:

- Reduce protocol latency for multiple file transfers
- Improve upon and deprecate =cf_promises_validated=


The idea is that the policy server has a map of all the files its serving with
their hashes, clients can download this map and do all checks locally before
ever wasting the hubs time.

The main win is that the server computes a hash per file once and all clients
re-use that computation.

EFL has a feature for this, and LinkedIn has been using the pattern for 3 years
with great success. The only issue is related to file deletions. Both use
periodic transfers with =purge => true= to cleanup file deletions.

Ideas:
- map index for each access type promise
  - the index is a file generated by the c code
  - there should be a way to request generation now

- new body attribute for access type promises
  - index => my_index_body
    - map => "true/false",
    - hash => "md5|sha2|whatever"
    - location => "$(this.promiser)|/path/to/specific/location|/path/to/$(connection.SHA)/file";

- Keep map in memory
  - Should be part of server protocol and not an optional add-on
  - keep hash of hash map to determine if the entire hash needs to
    be transferred (over-engineered?)

*** Cfgmgmtcamp eu Belgium 2017
:PROPERTIES:
:ID:       824f7410-5cfe-469e-8f95-b30d0e6843a7
:END:

- Svoboda :: Maybe remote presentation on firewall policy, or network switches
- Neil Watson ::  Maybe remote presentation on EFL

Nick to followup

*** Explicit iteration [[jira:CFE-2378]]
:PROPERTIES:
:ID:       ec6ccf94-f51b-42f5-bdd1-86a0a6af78a8
:END:


#+BEGIN_SRC cfengine3
  bundle agent main
  {
    vars:
      "mylist" slist => { "one", "two", "three" };

      "array[$(this)]"
        string => "$(this)",
        with_iterable => "mylist";

      "array[$(this)]"
        string => "$(this)",
        with_iterable => '[ "one", "two", "three" ]';

      "array[$(this)]"
        string => "$(this)",
        with_iterable => { "one", "two", "three" };

      "array[$(this)]"
        string => "$(this)",
        with_iterable => unique(maplist(dirname($(item)), filelist)),
        comment => "to collect all the directories in a list of files. This saves
                    a variable and also keeps the transformation close to the
                    point of usage";

  }
#+END_SRC

Equivlent to:

#+BEGIN_SRC cfengine3
bundle agent main
{
  vars:
    "mylist" slist => { "one", "two", "three" };

    "array[$(mylist)]"
      string => "$(mylist)";
}
#+END_SRC

